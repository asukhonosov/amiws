/**
 * amiws -- Library with functions for read/create AMI packets
 * Copyright (C) 2017, Stas Kobzar <staskobzar@modulis.ca>
 *
 * This file is part of amiws.
 *
 * amiws is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * amiws is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with amiws.  If not, see <http://www.gnu.org/licenses/>.
 */

/**
 * @file amiws.h
 * @brief AMI (Asterisk Management Interface) connector and websocket
 * remote interface functions.
 *
 * @author Stas Kobzar <stas.kobzar@modulis.ca>
 */

#ifndef __AMIWS_H
#define __AMIWS_H

#include <stdio.h>
#include <syslog.h>
#include <yaml.h>

#include "amipack.h"
#include "config.h"
#include "frozen.h"
#include "mongoose.h"

/*! Default configuration path. */
#define DEFAULT_CONF_FILE     "/etc/amiws.yaml"
/*! Default path to web root with static HTML content. */
#define DEFAULT_WEB_ROOT      "./web_root"
/*! Default log level as in syslog.h */
#define DEFAULT_LOG_LEVEL     LOG_INFO
/*! Default log facility as in syslog.h */
#define DEFAULT_LOG_FACILITY  LOG_SYSLOG
/*! Default WebSock and HTTP port. */
#define DEFAULT_WEBSOCK_ADDRESS_PORT  "8000"
/*! Polling interval. */
#define POLL_SLEEP 1000

/*! Convert string to int */
#define intval(val) str2int(val, strlen(val))

/*! Macro to initilize configuration structure. */
#define macro_init_conf(conf) conf = (struct amiws_config *) malloc(sizeof(struct amiws_config));\
  memset(conf,0,sizeof(struct amiws_config)); \
  conf->log_level     = DEFAULT_LOG_LEVEL;    \
  conf->log_facility  = DEFAULT_LOG_FACILITY; \
  conf->ws_address_port = NULL; \
  conf->size          = 0;                    \
  conf->head          = NULL;                 \
  conf->tail          = NULL;                 \
  conf->web_root      = NULL;                 \
  conf->auth_domain   = NULL;                 \
  conf->parse_fail    = 0;                    \
  conf->syntax_error  = 0;                    \
  conf->auth_file     = NULL;


/*! Macro to initilize AMI connection. */
#define macro_init_conn(conn) conn = (struct amiws_conn *) malloc(sizeof(struct amiws_conn)); \
  memset(conn,0,sizeof(struct amiws_conn)); \
  conn->port = 5038;        \
  conn->address = NULL;     \
  conn->name = NULL;        \
  conn->host = NULL;        \
  conn->username = NULL;    \
  conn->secret = NULL;      \
  conn->is_ssl = 0;         \
  conn->event_names = NULL; \


/*!
 * Root configuration structure.
 * Linked list of AMI connections.
 */
struct amiws_config {
  struct amiws_conn *head;  /*!< AMI connection head of list. */
  struct amiws_conn *tail;  /*!< AMI connection tail of list. */
  int size;                 /*!< Number of connections. */
  int log_facility;         /*!< Log facility for syslog. */
  int log_level;            /*!< Log level for syslog. */
  char *ws_address_port;    /*!< HTTP and WebSocket address and port to listen. */
  char *web_root;           /*!< Path to static HTML document. */
  char *auth_domain;        /*!< Auth domain for WWW Digest Auth. */
  char *auth_file;          /*!< Auth file for WWW Digest Auth.
                              Use htdigest to generate.
                             */
#if MG_ENABLE_SSL
  char *ssl_cert;           /*!< SSL certificate file. */
  char *ssl_key;            /*!< SSL key file. */
#endif

  int parse_fail:1;
  int syntax_error:1;
};

/*!
 * AMI connection structure.
 */
struct amiws_conn {
  int id;                   /*!< Connection ID. Autogenerated. */
  char *name;               /*!< Connection name. */
  char *address;            /*!< Connection address. Will be generated. */
  unsigned int port;        /*!< AMI server port. */
  char *host;               /*!< AMI server host of IP. */
  char *username;           /*!< AMI username. */
  char *secret;             /*!< AMI password. */
  char *event_names;        /*!< Event names filter. */
  AMIVer ami_ver;           /*!< AMI version as server prompts. */
#if MG_ENABLE_SSL
  char *ssl_cert;           /*!< SSL certificate file. */
  char *ssl_key;            /*!< SSL key file. */
#endif
  int is_ssl;               /*!< Flag if SSL is used. */
  struct amiws_conn *next;  /*!< Pointer to next connection. */
};

int isExiting();

void setExiting();

/**
 * Initialize amiws with given configuration.
 * Will start listening for HTTP and WebSocket
 * and connects to AMI servers.
 * @param conf  Configuration structure.
 */
void amiws_init(struct amiws_config *conf);

/**
 * Connect to AMI server.
 * @param conn  Connection configuration structure.
 */
void amiws_connect_ami_server(struct amiws_conn *conn);

/**
 * Destroy connections and free memory.
 */
void amiws_destroy();

/**
 * Main amiws loop step.
 */
void amiws_loop();

/**
 * Callback function for AMI connections.
 * @param nc      Connection structure.
 * @param ev      Event ID
 * @param ev_data Additional data passed
 */
void ami_ev_handler(struct mg_connection *nc, int ev, void *ev_data);

/**
 * Callback function for HTTP and WebSocket connections.
 * @param nc      Connection structure.
 * @param ev      Event ID
 * @param ev_data Additional data passed
 */
void websock_ev_handler (struct mg_connection *nc, int ev, void *ev_data);

/**
 * Send JSON string to WebSocket.
 * @param nc      Connection structure.
 * @param json    JSON string.
 */
void websock_send (struct mg_connection *nc, const char *json);

/**
 * Login to AMI server. Send loging Action.
 * @param nc      Connection structure.
 * @param conn    AMI connection.
 */
void ami_login(struct mg_connection *nc, struct amiws_conn *conn);

/**
 * Convert AMI packet to JSON string.
 * @param buf     AMI packet stream as received from connection
 * @param len     Buffer size
 * @param conn    AMI connection.
 * @return JSON string
 */
char *amipack_to_json(const char *buf, int len, struct amiws_conn *conn);

/**
 * Read YAML configuration file.
 * @param filename  Path to file.
 * @return configuration structure or NULL on error.
 */
struct amiws_config *read_conf(const char *filename);

/**
 * Scan stream and extract AMI packet separated with
 * CRLF CRLF token. TCP connection is feeding packets
 * as stream and this function will get complete packet.
 * @param pack      Char stream received from server.
 * @param len       Stream length
 */
int scan_amipack(const char *pack, size_t len);

/**
 * Destroy configuration structure.
 * @param conf      Configuration structure.
 */
void free_conf(struct amiws_config *conf);

/* private methods */

static void recv_callback(struct mbuf *io, struct amiws_conn *conn, struct mg_connection *nc);

static void read_buffer(struct mbuf *io, struct mg_connection *nc);

void set_conf_param(struct amiws_config *conf, char *key, char *value);

void set_conn_param(struct amiws_conn *conn, char *key, char *value);

static int str2int(const char *val, int len);

static char* int2str(const char *val, int len);

static int auth_fail(AMIPacket *amipack);

static void send_ami_action(struct websocket_message *wm, struct mg_connection *nc);

static void json_scan_cb(void *callback_data,
                          const char *name, size_t name_len,
                          const char *path,
                          const struct json_token *token);

static struct amiws_config *valid_conf(struct amiws_config *conf);

static int is_valid_auth_settings(struct amiws_config *conf);

#if MG_ENABLE_SSL
static int is_valid_ssl_settings(struct amiws_config *conf);

static int is_valid_ssl_conn_settings(struct amiws_conn *conn);
#endif

#endif
